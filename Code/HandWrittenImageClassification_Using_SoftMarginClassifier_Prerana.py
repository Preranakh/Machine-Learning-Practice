# -*- coding: utf-8 -*-
"""SMC_Khatiwada.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k4WgBdk6sCXhGUbId0OYeO6ymdN0X1b1
"""

import scipy.io
import numpy as np
from matplotlib import pyplot as plt
import scipy.io
import numpy as np
data = scipy.io.loadmat('mnist_49_3000.mat')
x = np.array(data['x'])
y = np.array(data['y'][0])
print(y)
#y[y==-1] = 0

x_train = x[:,:2000]
x_test = x[:,2000:]
y_train = y[:2000]
y_test = y[2000:]

x_train.shape,x_test.shape,y_train.shape,y_test.shape

index = 0 
#change the index to show different images
image = x[:,index].reshape(28,28)
plt.imshow(image, interpolation='nearest')
plt.show()

def grad(w,b,x_train,y_train):
  c = 100
  n = 2000
  db = 0  
  dw = np.array(w).reshape(-1,1)  
  for i in range(2000):    
    if y_train[i]*(w.T.dot(x_train[:,i].reshape(-1,1)) +b)<1:
      db += -(c*y_train[i])/n      
      dw += -(c/n)*x_train[:,i].reshape(-1,1)*y_train[i]  
  return dw,db
b = 0
w = np.zeros((784,1))
for i in range(600):  
  dw,db = grad(w,b,x_train,y_train)  
  w-=0.01*dw  
  b-=0.01*db


y_pred=[]
for i in range(1000):
  current_data = x_test[:,i].reshape(-1,1) 
  c=np.sign(w.T.dot(current_data)+b)[0][0]
  y_pred.append(c)
y_pred = np.array(y_pred)

print("No of correctly classified images is:",sum(y_pred==y_test))
Test_Accuracy=100*sum(y_pred==y_test)/(len(y_test))
Test_Error = 100-100*sum(y_pred==y_test)/(len(y_test))
print('Test Accuracyis:' , Test_Accuracy)
print('Test Error is:' , Test_Error)


index = (y_pred!=y_test)
x_false = x_test[:,index]

prob_false = y_pred[index]

indices = (abs(prob_false-0.5)).argsort()[-5:]
fig, axs = plt.subplots(1,5, sharex=True, sharey=True)
count =0
for i in reversed(indices):
  image = x_false[:,i].reshape(28,28)
  axs[count].imshow(image, interpolation='nearest')
  if y[i]==0:
    axs[count].set_title('9')
  else:
    axs[count].set_title('4')
  count +=1

"""COST"""

HZ=np.zeros(2000)
for i in range(2000):
  HZ[i]=y_train[i]*(w.T.dot(x_train[:,i]) +b)
  C=100
  Cost=(1 / 2) * w.T.dot(w) + (C/2000) * np.sum(np.maximum(0, 1 - HZ))
print("The value of the objective function at the optimum is:",Cost)

"""Optimization Criteria--I ran the code for 600 iteration and my optimization function at this point is 14."""