# -*- coding: utf-8 -*-
"""LR_Khatiwada.py.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ECGLQjRBj1K3ILjD9c8rSm0mOYQmvA1R
"""

import numpy as np
from matplotlib import pyplot as plt
np.random.seed(0)
import pandas as pd

n=10
x= np.linspace(0,3,n)
y= 2.0*x + 1.0+ 0.5*np.random.randn(n)
y[9] = 20

plt.plot(x,y,'o')
plt.plot(x,2*x+1)
plt.legend(['data','true line'])

x.ndim

y.ndim

x.shape

y.shape

x,y

x_mean = np.mean(x)
y_mean = np.mean(y)
x_mean,y_mean

Sxy = np.sum(x*y)- n*x_mean*y_mean
Sxx = np.sum(x*x)-n*x_mean*x_mean

Sxy

Sxx

"""Solve ordinary least squares problem to report w and b."""

w = Sxy/Sxx
b = y_mean-w*x_mean
print('slope w is:', w)
print('intercept b is:', b)

plt.scatter(x,y)
plt.xlabel('Independent variable X')
plt.ylabel('Dependent variable y')

y_pred = w * x + b  
plt.scatter(x, y, color = 'blue')
plt.plot(x, y_pred, color = 'orange')
plt.xlabel('X')
plt.ylabel('y')

"""Solving ridge regression problem with Î»= 3 and finding the values for w,b."""

from matplotlib import pyplot as plt
import numpy as np
np.random.seed(0)
import pandas as pd

n=10
X= np.linspace(0,3,n)
Y= 2.0*X + 1.0+ 0.5*np.random.randn(n)
Y[9] = 20
X = np.reshape(X, (10,1))
X.shape

# Importing libraries
  
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
  
# Ridge Regression
  
class RRModel() :     
    def __init__( self, learning_rate, iterations, lambdaa ) :         
        self.learning_rate = learning_rate        
        self.iterations = iterations        
        self.lambdaa = lambdaa
                    
    def fit( self, X, Y ) :           
        self.m, self.n = X.shape           
        self.W = np.zeros( self.n )       
        self.b = 0        
        self.X = X        
        self.Y = Y                 
        for i in range( self.iterations ) :            
            self.update_weights()            
        return self
         
    def update_weights( self ) :           
        Y_pred = self.predict( self.X )        
        dW = ( - ( 2 * ( self.X.T ).dot( self.Y - Y_pred ) ) +               
               ( 2 * self.lambdaa * self.W ) ) / self.m     
        db = - 2 * np.sum( self.Y - Y_pred ) / self.m 
            
        self.W = self.W - self.learning_rate * dW    
        self.b = self.b - self.learning_rate * db        
        return self
      
    def predict( self, X ) :    
        return X.dot( self.W ) + self.b

def main() :
      
    # Model training    
    model = RRModel( iterations = 100,learning_rate = 0.01, lambdaa = 3)
    model.fit( X, Y )
    Y_pred = model.predict( X )     
    print( "w-2nd       ", round( model.W[0], 2 ) )    
    print( "b-2nd       ", round( model.b, 2 ) )

    plt.scatter( X, Y, color = 'blue' )    
    plt.plot( X, Y_pred, color = 'orange' )        
    plt.show()

      
if __name__ == "__main__" : 
    main()