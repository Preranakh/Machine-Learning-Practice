# -*- coding: utf-8 -*-
"""NB_Khatiwada.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HB3_mPZZqS0lgqW8kpWY8UeShcYFBY_B
"""

import numpy as np
import urllib.request
import pandas as pd
from sklearn.model_selection import train_test_split
url =" http://archive.ics.uci.edu/ml/machine-learning-databases/spambase/spambase.data"
raw_data = urllib.request.urlopen(url)
dataset = np.loadtxt(raw_data,delimiter=",")

print(dataset)

x = dataset[:,0:-1]
y = dataset[:,-1]

m = np.median(x, axis = 0)
x = (x>m)*2+(x<=m)*1;

print(x,len(x))

print(y,len(y))

x_train,x_test,y_train,y_test= train_test_split(x,y,test_size = 0.3, random_state = 17)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

No_of_rows_in_y=len(y_train)

Y_Train1= np.count_nonzero(y_train == 1)
Y_Train0= np.count_nonzero(y_train == 0)
##Calculating the probabilities
ProbabilityY1=Y_Train1/No_of_rows_in_y 
ProbabilityY0=Y_Train0/No_of_rows_in_y

print(Y_Train1,Y_Train0,ProbabilityY1,ProbabilityY0)

PX1Y1 = np.zeros((1,57))
PX2Y1 = np.zeros((1,57)) 
PX1Y0 = np.zeros((1,57))
PX2Y0 = np.zeros((1,57))

for colm in range(57):
  X1Y1=0
  X2Y1=0
  X1Y0=0
  X2Y0=0

  for rows in range(3220):
    if x_train[rows][colm]==1 and y_train[rows]==1:
      X1Y1=X1Y1+1
    elif x_train[rows][colm]==2 and y_train[rows]==1:
      X2Y1=X2Y1+1
    elif x_train[rows][colm]==1 and y_train[rows]==0:
      X1Y0=X1Y0+1
    else:
      X2Y0 =X2Y0 +1
  
  PX1Y1[0][colm] = X1Y1/Y_Train1 
  PX2Y1[0][colm] = X2Y1/Y_Train1
  PX1Y0[0][colm]=  X1Y0/Y_Train0
  PX2Y0[0][colm]=  X2Y0/Y_Train0

predict=np.zeros(len(x_test))

for rows in range (len(x_test)):
  prob_of_x_given_y1=1
  prob_of_x_given_y0=1
  
  for colm in range (57):
    if x_test[rows][colm]==1:
      prob_of_x_given_y1=prob_of_x_given_y1*PX1Y1[0][colm]
      prob_of_x_given_y0=prob_of_x_given_y0*PX1Y0[0][colm]
    else:
      prob_of_x_given_y1=prob_of_x_given_y1*PX2Y1[0][colm]  
      prob_of_x_given_y0=prob_of_x_given_y0*PX2Y0[0][colm]

    Prob_of_Y1GivenX=prob_of_x_given_y1*ProbabilityY1
    Prob_of_Y0GivenX=prob_of_x_given_y0*ProbabilityY0
 
  if  Prob_of_Y1GivenX > Prob_of_Y0GivenX:
    predict[rows]=1
  else:
    predict[rows]=0

predict

Test_Accuracy=100*sum(predict==y_test)/(len(y_test))
Test_Error = 100-100*sum(predict==y_test)/(len(y_test))

print('Test Accuracy of the NB Classifier is:' , Test_Accuracy)
print('Test Error of the NB Classifier is:' , Test_Error)